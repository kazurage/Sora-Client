import os
import zipfile
import requests
import shutil
import sys
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import threading
import json
import base64
import hashlib
import tempfile
import winreg
import subprocess

# –ü—É—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ Program Files (x86)
program_files_path = r"C:\Program Files (x86)"
install_path = os.path.join(program_files_path, "Corelink")

zip_url = "https://github.com/kazurage/Sora-Client/releases/download/python/SoraClient.zip"

class SoraInstaller:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Sora-Client –£—Å—Ç–∞–Ω–æ–≤—â–∏–∫")
        self.root.geometry("500x450")
        self.root.resizable(False, False)
        
        # –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
        self.root.configure(bg='#1a1a1a')
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.root.eval('tk::PlaceWindow . center')
        
        self.setup_ui()
        
    def setup_ui(self):
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º —Å —Ç–µ–º–Ω—ã–º —Ñ–æ–Ω–æ–º
        main_frame = tk.Frame(self.root, bg='#1a1a1a', padx=20, pady=20)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(main_frame, text="üöÄ Sora-Client", 
                              font=("Arial", 18, "bold"), 
                              fg='white', bg='#1a1a1a')
        title_label.pack(pady=(0, 30))
        
        # –ü–æ–ª–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
        token_label = tk.Label(main_frame, text="üîë Token —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞", 
                              font=("Arial", 10), 
                              fg='white', bg='#1a1a1a')
        token_label.pack(anchor='w', pady=(0, 5))
        
        self.token_entry = tk.Entry(main_frame, width=50, show="*", 
                                   font=("Arial", 10), 
                                   bg='#404040', fg='white', 
                                   insertbackground='white',
                                   relief='flat', bd=5)
        self.token_entry.pack(fill=tk.X, pady=(0, 20))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –¥–ª—è –ø–æ–ª—è —Ç–æ–∫–µ–Ω–∞
        self.token_entry.bind('<Control-v>', self.paste_text)
        self.token_entry.bind('<Control-c>', self.copy_text)
        self.token_entry.bind('<Control-a>', self.select_all)
        self.token_entry.bind('<Control-x>', self.cut_text)
        self.token_entry.bind('<Button-3>', self.show_context_menu)
        
        # –ü–æ–ª–µ –¥–ª—è Telegram ID
        telegram_id_label = tk.Label(main_frame, text="üë§ –í–∞—à Telegram ID", 
                                     font=("Arial", 10), 
                                     fg='white', bg='#1a1a1a')
        telegram_id_label.pack(anchor='w', pady=(0, 5))
        
        self.telegram_id_entry = tk.Entry(main_frame, width=50, 
                                         font=("Arial", 10), 
                                         bg='#404040', fg='white', 
                                         insertbackground='white',
                                         relief='flat', bd=5)
        self.telegram_id_entry.pack(fill=tk.X, pady=(0, 30))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –¥–ª—è –ø–æ–ª—è Telegram ID
        self.telegram_id_entry.bind('<Control-v>', self.paste_text)
        self.telegram_id_entry.bind('<Control-c>', self.copy_text)
        self.telegram_id_entry.bind('<Control-a>', self.select_all)
        self.telegram_id_entry.bind('<Control-x>', self.cut_text)
        self.telegram_id_entry.bind('<Button-3>', self.show_context_menu)
        
        # –ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.install_button = tk.Button(main_frame, text="üì¶ –ù–∞—á–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É", 
                                       command=self.start_installation,
                                       font=("Arial", 12, "bold"),
                                       bg='#2d2d2d', fg='white',
                                       activebackground='#404040',
                                       activeforeground='white',
                                       relief='flat', bd=0,
                                       padx=20, pady=10)
        self.install_button.pack(pady=(0, 20))
        
        # –û–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤
        log_label = tk.Label(main_frame, text="üìù –õ–æ–≥–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏", 
                            font=("Arial", 10), 
                            fg='white', bg='#1a1a1a')
        log_label.pack(anchor='w', pady=(0, 5))
        
        self.log_text = scrolledtext.ScrolledText(main_frame, width=60, height=12,
                                                 font=("Consolas", 9),
                                                 bg='#000000', fg='white',
                                                 insertbackground='white',
                                                 relief='flat', bd=5)
        self.log_text.pack(fill=tk.BOTH, expand=True)
        
    def log_message(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        def update_log():
            self.log_text.insert(tk.END, message + "\n")
            self.log_text.see(tk.END)
            self.root.update_idletasks()
        
        if threading.current_thread() == threading.main_thread():
            update_log()
        else:
            self.root.after(0, update_log)
    
    def paste_text(self, event):
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞"""
        try:
            text = self.root.clipboard_get()
            widget = event.widget
            widget.insert(tk.INSERT, text)
            return "break"
        except:
            pass
    
    def copy_text(self, event):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        try:
            widget = event.widget
            if widget.selection_present():
                text = widget.selection_get()
                self.root.clipboard_clear()
                self.root.clipboard_append(text)
            return "break"
        except:
            pass
    
    def cut_text(self, event):
        """–í—ã—Ä–µ–∑–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        try:
            widget = event.widget
            if widget.selection_present():
                text = widget.selection_get()
                self.root.clipboard_clear()
                self.root.clipboard_append(text)
                widget.delete(tk.SEL_FIRST, tk.SEL_LAST)
            return "break"
        except:
            pass
    
    def select_all(self, event):
        """–í—ã–¥–µ–ª—è–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ"""
        try:
            widget = event.widget
            widget.select_range(0, tk.END)
            return "break"
        except:
            pass
    
    def show_context_menu(self, event):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏"""
        try:
            context_menu = tk.Menu(self.root, tearoff=0, 
                                 bg='#2d2d2d', fg='white',
                                 activebackground='#404040',
                                 activeforeground='white',
                                 relief='flat', bd=1)
            
            context_menu.add_command(label="üìã –í—Å—Ç–∞–≤–∏—Ç—å", 
                                   command=lambda: self.paste_text_from_menu(event.widget))
            context_menu.add_command(label="üìÑ –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", 
                                   command=lambda: self.copy_text_from_menu(event.widget))
            context_menu.add_command(label="‚úÇÔ∏è –í—ã—Ä–µ–∑–∞—Ç—å", 
                                   command=lambda: self.cut_text_from_menu(event.widget))
            context_menu.add_separator()
            context_menu.add_command(label="üîò –í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ", 
                                   command=lambda: self.select_all_from_menu(event.widget))
            
            context_menu.post(event.x_root, event.y_root)
            
        except Exception as e:
            pass
    
    def paste_text_from_menu(self, widget):
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é"""
        try:
            text = self.root.clipboard_get()
            widget.insert(tk.INSERT, text)
        except:
            pass
    
    def copy_text_from_menu(self, widget):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é"""
        try:
            if widget.selection_present():
                text = widget.selection_get()
                self.root.clipboard_clear()
                self.root.clipboard_append(text)
        except:
            pass
    
    def cut_text_from_menu(self, widget):
        """–í—ã—Ä–µ–∑–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é"""
        try:
            if widget.selection_present():
                text = widget.selection_get()
                self.root.clipboard_clear()
                self.root.clipboard_append(text)
                widget.delete(tk.SEL_FIRST, tk.SEL_LAST)
        except:
            pass
    
    def select_all_from_menu(self, widget):
        """–í—ã–¥–µ–ª—è–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é"""
        try:
            widget.select_range(0, tk.END)
        except:
            pass
        
    def check_admin_rights(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            test_file = os.path.join(program_files_path, "test_access.tmp")
            with open(test_file, 'w') as f:
                f.write("test")
            os.remove(test_file)
            return True
        except (PermissionError, OSError):
            return False
            
    def generate_key(self, password):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–æ–ª—è"""
        salt = b'sora_client_salt'
        key = hashlib.pbkdf2_hmac('sha256', password.encode(), salt, 100000)
        return key

    def encrypt_data(self, data, key):
        """–®–∏—Ñ—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
        try:
            data_bytes = json.dumps(data).encode()
            encrypted = bytearray()
            for i, byte in enumerate(data_bytes):
                encrypted.append(byte ^ key[i % len(key)])
            return base64.b64encode(bytes(encrypted)).decode()
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")

    def save_credentials(self, token, telegram_id):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
        try:
            key = self.generate_key("sora_client_master_key")
            
            data = {
                "bot_token": token,
                "telegram_id": telegram_id,
                "created_at": "2024-01-01",
                "version": "1.0"
            }
            
            encrypted_data = self.encrypt_data(data, key)
            
            config_file = os.path.join(install_path, "config.json")
            with open(config_file, 'w', encoding='utf-8') as f:
                json.dump({"encrypted_data": encrypted_data}, f, indent=2)
            
            self.log_message("üîë –î–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ config.json")
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

    def move_files_from_subfolder(self):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ SoraClient –≤ –∫–æ—Ä–µ–Ω—å corelink"""
        try:
            sora_client_path = os.path.join(install_path, "SoraClient")
            
            if not os.path.exists(sora_client_path):
                self.log_message("‚ö†Ô∏è –ü–∞–ø–∫–∞ SoraClient –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
                
            self.log_message("üöö –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ SoraClient...")
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –∏–∑ SoraClient –≤ –∫–æ—Ä–µ–Ω—å corelink
            moved_files = 0
            for item in os.listdir(sora_client_path):
                source_path = os.path.join(sora_client_path, item)
                dest_path = os.path.join(install_path, item)
                
                try:
                    # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                    if os.path.exists(dest_path):
                        if os.path.isfile(dest_path):
                            os.remove(dest_path)
                        else:
                            shutil.rmtree(dest_path)
                    
                    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª/–ø–∞–ø–∫—É
                    shutil.move(source_path, dest_path)
                    self.log_message(f"üìÅ –ü–µ—Ä–µ–º–µ—â–µ–Ω: {item}")
                    moved_files += 1
                    
                except Exception as e:
                    self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è {item}: {e}")
                    continue
            
            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –ø–∞–ø–∫—É SoraClient
            try:
                os.rmdir(sora_client_path)
                self.log_message("üóëÔ∏è –ü–∞–ø–∫–∞ SoraClient —É–¥–∞–ª–µ–Ω–∞")
            except Exception as e:
                self.log_message(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É SoraClient: {e}")
            
            self.log_message(f"‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {moved_files}")
            return True
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")
            return False

    def add_to_autostart(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É Windows"""
        try:
            exe_path = os.path.join(install_path, "wintrix.exe")
            
            if not os.path.exists(exe_path):
                self.log_message("‚ö†Ô∏è –§–∞–π–ª wintrix.exe –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É")
                return False
            
            self.log_message("üîß –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É Windows...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–µ—Å—Ç—Ä Windows –¥–ª—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏
            key_path = r"SOFTWARE\Microsoft\Windows\CurrentVersion\Run"
            value_name = "WinTrix"
            
            try:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–ª—é—á —Ä–µ–µ—Å—Ç—Ä–∞
                key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_SET_VALUE)
                winreg.SetValueEx(key, value_name, 0, winreg.REG_SZ, exe_path)
                winreg.CloseKey(key)
                
                self.log_message("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É")
                return True
                
            except Exception as e:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É: {e}")
                return False
                
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É: {e}")
            return False

    def launch_program(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É wintrix.exe"""
        try:
            exe_path = os.path.join(install_path, "wintrix.exe")
            
            if not os.path.exists(exe_path):
                self.log_message("‚ö†Ô∏è –§–∞–π–ª wintrix.exe –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ –º–æ–∂–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å")
                return False
            
            self.log_message("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º wintrix.exe...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
            subprocess.Popen([exe_path], cwd=install_path)
            self.log_message("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
            return True
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {e}")
            return False

    def download_file(self, url, filename):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
        try:
            self.log_message(f"üì¶ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: {url}")
            
            response = requests.get(url, stream=True, timeout=30)
            response.raise_for_status()
            
            total_size = int(response.headers.get('content-length', 0))
            downloaded = 0
            
            with open(filename, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
                        downloaded += len(chunk)
                        if total_size > 0:
                            progress = (downloaded / total_size) * 100
                            self.log_message(f"üìä –°–∫–∞—á–∞–Ω–æ: {progress:.1f}%")
            
            self.log_message(f"‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω: {filename}")
            return True
            
        except requests.exceptions.RequestException as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            return False
        except Exception as e:
            self.log_message(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
            return False

    def extract_zip(self, zip_path, extract_to):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ ZIP –∞—Ä—Ö–∏–≤–∞"""
        try:
            self.log_message(f"üóÇ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É: {zip_path}")
            self.log_message(f"üìÅ –ü–∞–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {extract_to}")
            
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ
                file_list = zip_ref.namelist()
                total_files = len(file_list)
                
                self.log_message(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ: {total_files}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
                for i, file_info in enumerate(zip_ref.infolist()):
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–π–ª
                        zip_ref.extract(file_info, extract_to)
                        self.log_message(f"üìÑ –ò–∑–≤–ª–µ—á–µ–Ω: {file_info.filename}")
                    except Exception as e:
                        self.log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è {file_info.filename}: {e}")
                        continue
                
                self.log_message(f"‚úÖ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                return True
                
        except zipfile.BadZipFile:
            self.log_message("‚ùå –û—à–∏–±–∫–∞: –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π ZIP –∞—Ä—Ö–∏–≤")
            return False
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏: {e}")
            return False
            
    def install_files(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            token = self.token_entry.get().strip()
            telegram_id = self.telegram_id_entry.get().strip()
            
            if not token:
                self.log_message("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω Token —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞!")
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ Token —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞!")
                return
            
            if not telegram_id:
                self.log_message("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω Telegram ID!")
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID!")
                return
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ telegram_id —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
            try:
                int(telegram_id)
            except ValueError:
                self.log_message("‚ùå –û—à–∏–±–∫–∞: Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                messagebox.showerror("–û—à–∏–±–∫–∞", "Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                return
                
            self.log_message("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Sora-Client...")
            self.log_message(f"üîë Token: {token[:10]}...")
            self.log_message(f"üë§ Telegram ID: {telegram_id}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if not self.check_admin_rights():
                self.log_message("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ Program Files (x86)")
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ Program Files (x86)\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
                return
                
            self.log_message("‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã")
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            if os.path.exists(install_path):
                self.log_message(f"üóÇ –ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {install_path}")
                # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É
                try:
                    shutil.rmtree(install_path)
                    self.log_message("üßπ –°—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
                except Exception as e:
                    self.log_message(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –ø–∞–ø–∫—É: {e}")
            
            os.makedirs(install_path, exist_ok=True)
            self.log_message(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {install_path}")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è ZIP –∞—Ä—Ö–∏–≤–∞
            temp_zip = os.path.join(tempfile.gettempdir(), "sora_client_temp.zip")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∞—Ä—Ö–∏–≤
            if not self.download_file(zip_url, temp_zip):
                self.log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if os.path.exists(temp_zip):
                file_size = os.path.getsize(temp_zip)
                self.log_message(f"üìä –†–∞–∑–º–µ—Ä —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
                
                if file_size < 1000:  # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π
                    self.log_message("‚ùå –°–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π, –≤–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞")
                    return
            
            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
            if not self.extract_zip(temp_zip, install_path):
                self.log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –∞—Ä—Ö–∏–≤")
                return
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ SoraClient –≤ –∫–æ—Ä–µ–Ω—å corelink
            if not self.move_files_from_subfolder():
                self.log_message("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self.save_credentials(token, telegram_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É
            self.add_to_autostart()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
            self.launch_program()
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(temp_zip)
                self.log_message("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                self.log_message(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            self.log_message("üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:")
            try:
                for root, dirs, files in os.walk(install_path):
                    level = root.replace(install_path, '').count(os.sep)
                    indent = ' ' * 2 * level
                    self.log_message(f"{indent}üìÅ {os.path.basename(root)}/")
                    sub_indent = ' ' * 2 * (level + 1)
                    for file in files:
                        self.log_message(f"{sub_indent}üìÑ {file}")
            except Exception as e:
                self.log_message(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {e}")
            
            self.log_message("üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            self.log_message(f"üìÇ –§–∞–π–ª—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤: {install_path}")
            self.log_message("üîÑ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É –∏ –∑–∞–ø—É—â–µ–Ω–∞")
            self.log_message("üîÑ –û–∫–Ω–æ –∑–∞–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            self.root.after(5000, self.root.quit)
            
        except Exception as e:
            self.log_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            messagebox.showerror("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            def restore_button():
                self.install_button.config(state="normal", text="üì¶ –ù–∞—á–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É", bg='#2d2d2d')
            self.root.after(0, restore_button)
            
    def start_installation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        def update_button():
            self.install_button.config(state="disabled", text="‚è≥ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...", bg='#555555')
            self.log_text.delete(1.0, tk.END)
        
        update_button()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self.install_files)
        thread.daemon = True
        thread.start()
        
    def run(self):
        self.root.mainloop()

if __name__ == "__main__":
    app = SoraInstaller()
    app.run()